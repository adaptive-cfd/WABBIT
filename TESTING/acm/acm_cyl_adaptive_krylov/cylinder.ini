; WABBIT parameter file template.
; if you add new parameters, add them here.
; note values have to be declared "value=0;", with equal sign (=) and semicolon (;)

[Domain]
; 2D or 3D problem?
dim=2;
domain_size=4 4 0;



[Blocks]
; size of each block, should be odd (17, 33, 65 etc)
number_block_nodes=17;129;17;33;
; ghost nodes for each block
number_ghost_nodes=4;
; number of equations / components of state vector. Note you have to properly
; adjust this value for the physics module that you use.
number_equations=3;
; threshold value for thresholding wavelet coefficients
eps=1e-3;1e-4;
; treelevel bounds
max_treelevel=4;
min_treelevel=1;
; switch for mesh adaption, 1=on, ...=off
adapt_mesh=1;
; adaptive initial conditon? i.e. create grid to respect error bounds
; default is same value as adapt_mesh
adapt_inicond=1;
; in some situations, it is necessary to create the intial grid, and then refine it for a couple of times.
; for example if one does non-adaptive non-equidistant spatial convergence tests. default is 0.
inicond_refinements=0;
; block distribution for balancing (also used for start distribution)
; [equal | sfc_z | sfc_hilbert]
; equal -> simple uniformly distribution
; sfc_z  -> space filling curve -> z-curve
; sfc_hilbert -> hilbert space filling curve
block_dist=sfc_hilbert;
; coarsening indicator to be used in mesh adaptation
; threshold-state-vector: evaluates wavelet criterion on components of state vector. specify below which ones.
; threshold-vorticity: evaluates wavelet criterion on vorticity
coarsening_indicator=threshold-state-vector;
; use normalization for eps or not? normalization is done with INFTY norm currently. default
; is no normalization (0). ATTENTION works only for ACM currently (TODO!)
eps_normalized=1;
; which components to use for coarsening_indicator? default is all components.
; active only if coarsening_indicator=threshold-state-vector. select the components, set as
; many as number_data_fields
threshold_state_vector_component=1 1 0;
; if this flag is set (1), then blocks on max level have to coarsen, even if their
; details are significant. This is equivalent to ensuring dealiasing.
force_maxlevel_dealiasing=1;


[Statistics]
; save every nsave time steps (leave empty to disable)
nsave_stats=1;
; and every tsave physical time units (leave empty to disable)
tsave_stats=0.20;


[Saving]
; TODO: maybe this section is clumsy and should be revised.
; how many fields are you going to save?
N_fields_saved=7;
; how are the fields labeled?
field_names=vor ux uy p div mask sponge;

[ACM-new]
; speed of sound
c_0=35.0;
; viscosity
nu=5.000000e-03;
; damping term for pressure, see [Ohwada, Asinari, JCP2010]
gamma_p=0;
; use mean flow forcing or not
forcing=0;
; what method to use for forcing? available: accelerate / none / fixed
; specifiy at least Dim entries for each component
forcing_type=none none none;
; if mean flow forcing is used, this is the values for the mean velocities:
u_mean_set=1.0 0.1 0.0;
; initial condition
inicond=meanflow;
p_mean_zero=yes;


[Sponge]
; sponge term, used in ACM module to mimick outflow conditions for pressure waves
use_sponge=1;
sponge_type=p-norm;
p_sponge=8.0;
L_sponge=0.75;
C_sponge=1.0e-2;


[Time]
; final time to reach in simulation
time_max=0.085;
; number of time steps performed. if not set, default value is very large
nt=;
; CFL criterium
CFL=4.0;
CFL_eta=10.0;
time_step_method=Krylov;
M_krylov=10;
; write method (write with fixed frequency or time ) [ fixed_freq | fixed_time ]
write_method=fixed_time;
; write frequency for output, choose very large number for disabling output on disk
write_freq=;
; write time for output
write_time=0.0425;
; method to calculate time step [ fixed | CFL_cond | lvl_fixed ]
time_step_calc=CFL_cond;
; fixed time step. if greater 0, then the time step is fixed no matter what.
; default is 0.0, so not used.
dt_fixed=0.0;
; largest time step, if you want to set one. dt is always smaller than that, if the
; value is greater 0. default is 0.0, so not used.
dt_max=0.0;

[Physics]
; what physics module is used?
; [ACM-new, ConvDiff-new, navier_stokes]
physics_type=ACM-new;
read_from_files=0;
; input files that contain treecode, time, iteration, number of blocks and initial field
input_files=ux_000000340000.h5 uy_000000340000.h5 p_000000340000.h5;

[Discretization]
; order of derivatives [ FD_2nd_central | FD_4th_central_optimized ]
order_discretization=FD_4th_central_optimized;
; order of refinement predictor [ multiresolution_4th | multiresolution_2nd ]
order_predictor=multiresolution_4th;
; boundary condition [ periodic ]
boundary_cond=periodic;

[VPM]
; Volume penalization method to take obstacles into account without adapting the
; grid. Penalization is an equation-dependent addon. It can not be used with all
; RHS, if the RHS does not support it.
; flag for penalization (0/1)
penalization=1;
; smooth mask for penalization term [0,1]. If the obstacle moves, this flag should
; be set, and in static cases as well. hard masks with only 0 and 1 are deprecated but
; included for completeness.
smooth_mask=1;
; penalization factor. Can be seen as porosity, so smaller values = harder walls
; Note for explicit time integration, dt < C_eta
C_eta=1.0e-2;
; geometry
geometry=cylinder;
; center coordinate for cylinder
x_cntr=2.0 2.0 0.0;
; radius of cylinder
R_cyl=0.5;


[MPI]
; method for data exchange [ RMA_lock_unlock_get | RMA_lock_unlock_put | Non_blocking_Isend_Irecv ]
mpi_data_exchange=Non_blocking_Isend_Irecv ;


[Timing]
; If set to 1, the code will issue a single XXXXXtimes.dat file per proc, where one
; can examine individual mpiranks manually. this file is written in every iteration.
; the IO cost on some machines can be substantial if many cores are used: better disable
; this functionality then. default is 0.
write_individual_timings=0;

[Debug]
; check if the ghost node synchronization gives the right order, on a random
; grid. this test costs some CPU time but no memory. It is done only once at startup.
test_ghost_nodes_synch=1;
test_treecode=0;
; internal testing routine for the ghost nodes: allocates HUGE amounts of memory
check_redundant_nodes=0;
