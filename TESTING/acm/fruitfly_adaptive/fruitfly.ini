[Domain]
; 2D or 3D problem?
dim=3;
; size of computational domain. Important for both wabbit and the physics modules
domain_size=4 4 4;
; if this flag is set (1), then WABBIT assumes there are no boundaries, i.e. grid is continued
; periodicaly
; if flag is 0; WABBIT assumes pressents of BC on all domain_walls
periodic_BC=1;


[Blocks]
; size of each block, must be odd (17, 33, 65 etc)
number_block_nodes=17;
; ghost nodes for each block. It is possible that in current versions, one can only
; set even values
number_ghost_nodes=4;
; number of equations / components of state vector. Note you have to properly
; adjust this value for the physics module that you use.
; ACM: 3 (2D), 4 (3D)
; Convection: 1 (2D /3D)
number_equations=4;
; threshold value for thresholding wavelet coefficients
eps=1.0e-3;
; treelevel bounds
max_treelevel=3;
; DO NOT FORGET ADJUST WING THICKNESS AND PENALIZATION WHEN CHANGING JMAX
min_treelevel=1;
; switch for mesh adaption, 1=on, ...=off
adapt_mesh=1;
; adaptive initial conditon? i.e. create grid to respect error bounds
; default is same value as adapt_mesh
adapt_inicond=1;
; in some situations, it is necessary to create the intial grid, and then refine it for a couple of times.
; for example if one does non-adaptive non-equidistant spatial convergence tests. default is 0.
inicond_refinements=0;
; block distribution for balancing (also used for start distribution)
; [equal | sfc_z | sfc_hilbert]
; equal -> simple uniformly distribution
; sfc_z  -> space filling curve -> z-curve
; sfc_hilbert -> hilbert space filling curve
block_dist=sfc_hilbert;
; it can be expensive to balance the load and cheaper to live with a slight imbalance.
; Therefore, you can call loadbalancing only every couple of time steps. This parameter
; should affect only the computational cost and not the result.
loadbalancing_frequ=1;
; coarsening indicator to be used in mesh adaptation [threshold-state-vector,random,threshold-vorticity]
; threshold-state-vector: evaluates wavelet criterion on components of state vector. specify below which ones.
; threshold-vorticity: evaluates wavelet criterion on vorticity
coarsening_indicator=threshold-state-vector;
; use normalization for eps or not? normalization is done with INFTY norm currently. default
; is no normalization (0). ATTENTION works only for ACM currently (TODO!)
eps_normalized=1;
; which components to use for coarsening_indicator? default is all components.
; active only if coarsening_indicator=threshold-state-vector. select the components, set as
; many as number_equations
threshold_state_vector_component=1 1 1 0;
; if this flag is set (1), then blocks on max level have to coarsen, even if their
; details are significant. This is equivalent to ensuring dealiasing. Hence, if set to 1,
; wabbit will evaluate the right hand side of your equation on max_treelevel, but in the mesh
; coarsening it will, regardless of the solution, downsample the result to max_treelevel-1. Your
; expected precision is thus max_treelevel-1, but the computational cost (derivatives and timestep)
; is on max_treelevel.
force_maxlevel_dealiasing=1;
; if desired, we perform more than one time step
; before adapting the grid again. this can further reduce the overhead of adaptivity
; Note: the non-linear terms can create finer scales than resolved on the grid. they
; are usually filtered by the coarsening/refinement round trip. So if you do more than one time step
; on the grid, consider using a filter. default is "1", which is the classical scheme
N_dt_per_grid=1;


[Time]
; final time to reach in simulation
time_max=1.5;
; maximum walltime allowed for simulations (in hours). The run will be stopped if this duration
; is exceeded. This is useful on real clusters, where the walltime of a job is limited, and the
; system kills the job regardless of whether we're done or not. If WABBIT itself ends execution,
; a backup is written and you can resume the simulation where it ended
walltime_max=23.0;
; number of time steps performed. if not set, default value is very large
nt=20;
; CFL criterium (velocity)
CFL=0.5;
; CFL critierum for penalization (dt<CFL_eta*C_eta), if VPM is used. For RungeKuttaGeneric schemes, the constant
; has to be < 1.0 (otherwise the code is unstable). For krylov schemes, it can be greater
; 1, but be careful about the error.
CFL_eta=0.5;
; write method (write with fixed frequency or time ) [ fixed_freq | fixed_time ]
write_method=fixed_time;
; write frequency for output, choose very large number for disabling output on disk
write_freq=2;
; write time for output
write_time=0.10;
; fixed time step. if greater 0, then the time step is fixed no matter what.
; default is 0.0, so not used.
dt_fixed=0.0;
; largest time step, if you want to set one. dt is always smaller than that, if the
; value is greater 0. default is 0.0, so not used.
dt_max=0.0;
; time-step method. can be either "RungeKuttaGeneric" or "Krylov". In the former case,
; any explicit Runge-Kutta scheme can be set by using the Butcher-Tableau. (RK4 is default) In the latter,
; the number of Krylov subspaces M_krylov can be set.
; [ RungeKuttaGeneric, Krylov ]
time_step_method=RungeKuttaGeneric;
; if time_step_method is krylov, then you can specify the dimension of the krylov subspace
; below. If dynamic subspace dimensions are used, we interpret this number as the maximum
; number of spaces admissible (the method requires a lot of memory in general)
M_krylov=12;
; fixed or dynamic krylov subspace dimension:
; [ fixed, dynamic ]
krylov_subspace_dimension=fixed;
; if dynamic subspace dimensionality is used, provide the residuum threshold here. Note this is
; in general not an exact measure for the error, but rather a good indicator.
krylov_err_threshold=1.0e-3;
; butcher_tableau
; ralston's method (2nd-3rd order)
butcher_tableau=(/ 0.0 0.0 0.0
0.75 0.75 0.0
0.0  0.333333333333333333333333333333333332 0.66666666666666666666666667/)


[Physics]
; what physics module is used?
; [ACM-new, ConvDiff-new, navier_stokes]
physics_type=ACM-new;
; decide if you want to start from a given configuration (i.e. Statevector)
; 1:true, 0:false and we start from iniconditions
read_from_files=0;
; if read_from_files is true, WABBIT will try to start from the given files
input_files=ux_000000816687.h5 uy_000000816687.h5 uz_000000816687.h5 p_000000816687.h5;


[Saving]
; TODO: maybe this section is clumsy and should be revised.
; how many fields are you going to save?
N_fields_saved=5;
; how are the fields labeled?
field_names=ux uy uz p mask;


[Statistics]
; save every nsave time steps (leave empty to disable)
nsave_stats=10;
; and every tsave physical time units (leave empty to disable)
tsave_stats=;


[ACM-new]
; speed of sound, used also for the CFL condition. NOTE: if c_0 ~ u, then the CFL
; condition may be wrongly estimated, since the eigenvalues are actually different
c_0=15;
; viscosity. We also respect the time step constraint imposed by explicit diffusion
nu=0.0112782277122296;
; damping term for pressure, see [Ohwada, Asinari, JCP2010]
gamma_p=0;
; use mean flow forcing or not
forcing=0;
; what method to use for forcing? available: accelerate / none / fixed
; specifiy at least Dim entries for each component
forcing_type=none none none;
; if mean flow forcing is used, this is the values for the mean velocities:
u_mean_set=0.0 0.0 0.0;
; initial condition
inicond=meanflow;
; the mean pressure has no meaning in incompressible fluids, but sometimes it can
; be nice to ensure the mean is zero, e.g., for comparison wit other codes. if set to true
; wabbit removes the mean pressure at every time step.
p_mean_zero=yes;


[Sponge]
; sponge term, used in ACM module to mimick outflow conditions for pressure waves
use_sponge=1;
; shape of the sponge. the tradional form (default) is "rect", but we have a smoothed
; version with round corners which is called "p-norm". It has the parameter p_sponge,
; which controls the roundedness of corners. The function is inspired by the p-norm
; ((x-x0)**p + (y-y0)**p + (z-z0)**p)**1/p [https://de.wikipedia.org/wiki/P-Norm]
; a good compromise is p=20.0
sponge_type=p-norm;
; p-sponge is used only in conjunction with sponge_type=p-norm;
p_sponge=8.0;
; thickness of sponge layer (in physial units)
L_sponge=1.0;
; sponge damping constant
C_sponge=4.6416E-02;



[Discretization]
; order of derivatives [ FD_2nd_central | FD_4th_central_optimized ]
order_discretization=FD_4th_central_optimized;
; order of refinement predictor [ multiresolution_4th | multiresolution_2nd ]
order_predictor=multiresolution_4th;
; boundary condition [ periodic ]
boundary_cond=periodic;
; filter type [no_filter | explicit_5pt | explicit_7pt | explicit_9pt | explicit_11pt | wavelet | bogey_shock]
filter_type=no_filter;


[VPM]
; Volume penalization method to take obstacles into account without adapting the
; grid. Penalization is an equation-dependent addon. It can not be used with all
; RHS, if the RHS does not support it.
; flag for penalization (0/1)
penalization=1;
; WABBIT needs to know about the mask function (if penalization is used): does it contain
; a time-dependent-part (e.g. moving obstacles, time-dependent forcing)? does it contain
; a time-independent part (fixed walls, homogeneous forcing)? or both? WABBIT needs to know
; that since we try to create the time-independent mask function only once, but the time-dependent
; part of course in every time step.
mask_time_dependent_part=1;
mask_time_independent_part=1;
; smooth mask for penalization term [0,1]. If the obstacle moves, this flag should
; be set, and in static cases as well. hard masks with only 0 and 1 are deprecated but
; included for completeness.
smooth_mask=1;
; penalization factor. Can be seen as porosity, so smaller values = harder walls
; Note for explicit time integration, dt < C_eta
;
;for Keta = 0.07 and Jmax=6 this yields Ceta = (K * 2^-J * LX / (BS-1) )^2 / nu
C_eta=4.6416E-02;
# 5.0E-04; # jmax=6
# jmax7 = 1.25E-04
# jmax8 = 3.125E-05

; geometry: [funnel,triangle,cylinder,rhombus]
geometry=Insect;
; center coordinate of object
x_cntr=0.5 0.5 0;
; [triangle,rhombus]: angle between symmetry axis and triangle side (in degrees please)
angle=30;
; [triangle,rhombus]: length of the object
length=0.3;
; radius of cylinder
R_cyl=0.2;


[BRIDGE]
; type 1 if a bridge shell be created and 0 if not
connect_with_bridge=0;


[Timing]
; If set to 1, the code will issue a single XXXXXtimes.dat file per proc, where one
; can examine individual mpiranks manually. this file is written in every iteration.
; the IO cost on some machines can be substantial if many cores are used: better disable
; this functionality then. default is 0.
write_individual_timings=0;

[Debug]
; check if the ghost node synchronization gives the right order, on a random
; grid. this test costs some CPU time but no memory. It is done only once at startup.
test_ghost_nodes_synch=1;
test_treecode=0;
; internal testing routine for the ghost nodes: allocates HUGE amounts of memory
check_redundant_nodes=0;

[Insects]
;-------------------------------------------------------------------------------
; Body geometry
x_pivot_r=-0.12 -0.1445 0.08; (vector) position of right wing in body system
x_pivot_l=-0.12 +0.1445 0.08; (vector) position of left wing in body system
; Body (types: ellipsoid, drosophila, nobody)
BodyType=drosophila_slim;
HasDetails=all; legs; antennae_proboscis; no;
RightWing=yes;
LeftWing=yes;
b_body=0.2;
L_body=1.0;
R_head=0.20;
R_eye=0.075;
x_head=0.0 0.0 0.0; (vector)
x_eye_r=; (vector)
x_eye_l=; (vector)
J_body_yawpitchroll=1.0 1.0 1.0; Body moment of inertia in body reference frame
mass=1.0; total mass of animal
gravity=1.0; negative: falling in negative z-direction
;-------------------------------------------------------------------------------
; Wing geometry (Shapes: rectangular, TwoEllipses, drosophila, drosophila_mutated,
; drosophila_sandberg, drosophila_maeda, flapper_sane)
WingShape=drosophila_maeda;
b_top=0.1; if WingShape=TwoEllipses, that's thickness of the forward one
b_bot=0.3; if WingShape=TwoEllipses, that's thickness of the backward one
L_chord=1.0;
L_span=1.0;
; bs=23, jmax=6 L=16, h=5*dx
WingThickness=0.056818181818182;

; wing inertia tensor (used to compute inertial power)
Jxx=0.0560;
Jyy=0.0031;
Jzz=0.0591;
Jxy=0.0061;
;-------------------------------------------------------------------------------
; Body motion
; motion of the body: (tethered, free_flight)
BodyMotion=tethered;
x0=2 2 2; initial (or tethered) position
v0=0 0 0; inital velocity
yawpitchroll_0=45.0 -45.0 0.0; initial (or tethered) orientation in degrees
eta0=-45.00; stroke plane angle in degrees
DoF=000000; x,y,z,yaw,pitch,roll DoF on=1 or off=0
;-------------------------------------------------------------------------------
; Wing motion
; (types: Drosophila_hovering_fry, Drosophila_hovering_maeda, flapper_sane,
; flapper_dickinson, takeoff, simplified, from_file, none)
FlappingMotion_right=Drosophila_hovering_maeda;
FlappingMotion_left=Drosophila_hovering_maeda;
; if flappingmotion=="from_file", which file to use?
infile=bumblebee_new_kinematics.ini;
;-------------------------------------------------------------------------------
