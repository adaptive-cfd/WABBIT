; WABBIT parameter file template.
; if you add new parameters, add them here.
; note values have to be declared "value=0;", with equal sign (=) and semicolon (;)

[Domain]
; 2D or 3D problem?
dim=3;
domain_size=1 1 1;


[Blocks]
; size of each block, should be odd (17, 33, 65 etc)
number_block_nodes=17;129;17;33;
; ghost nodes for each block
number_ghost_nodes=4;
; number of equations / components of state vector. Note you have to properly
; adjust this value for the physics module that you use.
number_equations=1;
; threshold value for thresholding wavelet coefficients
eps=1e-5;
; treelevel bounds
max_treelevel=5;
min_treelevel=1;
; switch for mesh adaption, 1=on, ...=off
adapt_mesh=1;
; adaptive initial conditon? i.e. create grid to respect error bounds
; default is same value as adapt_mesh
adapt_inicond=1;
; in some situations, it is necessary to create the intial grid, and then refine it for a couple of times.
; for example if one does non-adaptive non-equidistant spatial convergence tests. default is 0.
inicond_refinements=0;
; block distribution for balancing (also used for start distribution)
; [equal | sfc_z | sfc_hilbert]
; equal -> simple uniformly distribution
; sfc_z  -> space filling curve -> z-curve
; sfc_hilbert -> hilbert space filling curve
block_dist=sfc_hilbert;
; non uniform mesh correction: if 1 then wabbit synchronize redundant nodes
; at coarse blocks with data from fine blocks [ 1 | ... ]
non_uniform_mesh_correction=1;
; coarsening indicator to be used in mesh adaptation
; threshold-state-vector: evaluates wavelet criterion on components of state vector. specify below which ones.
; threshold-vorticity: evaluates wavelet criterion on vorticity
coarsening_indicator=threshold-state-vector;
; use normalization for eps or not? normalization is done with INFTY norm currently. default
; is no normalization (0). ATTENTION works only for ACM currently (TODO!)
eps_normalized=0;
; which components to use for coarsening_indicator? default is all components.
; active only if coarsening_indicator=threshold-state-vector. select the components, set as
; many as number_equations
threshold_state_vector_component=1;




[Saving]
; TODO: maybe this section is clumsy and should be revised.
; how many fields are you going to save?
N_fields_saved=1;
; how are the fields labeled?
field_names=phi; ux uy uz;


[Statistics]
; save every nsave time steps (leave empty to disable)
nsave_stats=10;
; and every tsave physical time units (leave empty to disable)
tsave_stats=0.20;


[ACM-new]
; speed of sound
c_0=50.0;
; viscosity
nu=1e-2;
; damping term for pressure, see [Ohwada, Asinari, JCP2010]
gamma_p=1;
; use mean flow forcing or not
forcing=1;
; what method to use for forcing? available: accelerate / none / fixed
; specifiy at least Dim entries for each component
forcing_type=accelerate fixed none;
; if mean flow forcing is used, this is the values for the mean velocities:
u_mean_set=0.0 0.0 0.0;
; initial condition
inicond=meanflow;
; the mean pressure has no meaning in incompressible fluids, but sometimes it can
; be nice to ensure the mean is zero, e.g., for comparison wit other codes. if set to true
; wabbit removes the mean pressure at every time step.
p_mean_zero=no;


[Sponge]
; sponge term, used in ACM module to mimick outflow conditions for pressure waves
use_sponge=0;
L_sponge=0.1;
C_sponge=1.0e-2;


[ConvectionDiffusion]
; how many scalar fields do you want to solve? should be the same as number_equations
; above.
N_scalars=1;
; note you need to specify one value per scalar field for ALL the below parameters
; viscosity. if nu<1.0e-10 (or 0.0), diffusion is disabled.
nu=0.0e-6;
; initial condition for the scalar(s)
inicond=blob;
blob_width=0.03;
; position of blob
x0=0.0;
y0=0.0;
z0=0.0;
; velocity field for transportation, [swirl,constant]
velocity=constant;
; if the velocity profile is the swirl test, one sometimes would want to compute
; an incomplete swirl, i.e. Tmax and Tswirl to not agree. Set T_swirl here if you want
; the default is the same as the simulation duration
T_swirl=5.0;
; if constant velocity, these are the values (one per scalar)
u0x=1.0;
u0y=1.0;
u0z=1.0;


[Time]
; final time to reach in simulation
time_max=4.0;
; number of time steps performed. if not set, default value is very large
nt=20;
; CFL criterium
CFL=1.0;
; write method (write with fixed frequency or time ) [ fixed_freq | fixed_time ]
write_method=fixed_time;
; write frequency for output, choose very large number for disabling output on disk
write_freq=2;
; write time for output
write_time=1.0;
; method to calculate time step [ fixed | CFL_cond | lvl_fixed ]

; fixed time step. if greater 0, then the time step is fixed no matter what.
; default is 0.0, so not used.
dt_fixed=0.0;
; largest time step, if you want to set one. dt is always smaller than that, if the
; value is greater 0. default is 0.0, so not used.
dt_max=0.0;

; butcher_tableau
; use your butcher_tableau for the Runge Kutta time step function
; e.g. RK4:
; butcher_tableau=(/ 0.0 0.0 0.0 0.0 0.0
; 0.5 0.5 0.0 0.0 0.0
; 0.5 0.0 0.5 0.0 0.0
; 1.0 0.0 0.0 1.0 0.0
; 0.0 0.16666666666666666 0.33333333333333331 0.33333333333333331  0.16666666666666666 /)


[Physics]
; what physics module is used?
; [ACM-new, ConvDiff-new, navier_stokes]
physics_type=ConvDiff-new;
; initial condition can be set by the physics module or read from file. in the former
; case details are given in the corrsponding subsection for each physics module.
; [ physics-module | read_from_files]
initial_cond=physics-module;
; input files that contain treecode, time, iteration, number of blocks and initial field
input_files=rho_000000000141.h5 Ux_000000000141.h5 Uy_000000000141.h5 p_000000000141.h5;
; sponge (yes=1, no=0)
sponge_layer=1;
; sponge parameter
C_sp=0.001;


[Navier_Stokes]
; choose your coordinate_system
;  + default cartesian 2D/3D = "cartesian"
;  + cylindrical 2D = "cylindrical"
Coordinate_system=cylindrical;
; adiabatic coefficient
gamma_=1.4;
; specific gas constant
Rs=287.05         ;for air
; prandtl number
Pr=0.71;
; dynamic viscosity
mu0=1e-2;
; dissipation, 1=on, ...=off
dissipation=1;            ;
; initial conditions:
; 1.)mask:
;	 sets initial conditions to 0 at the mask domain
; 2.)zeros:
;    sets initial velocitys to 0 regardles of initial_velocity
; 3.)pressure_blob
; 	 pressure blob with diameter inicond_width
; 4.)sod_shock_tube
; 	 sets initial conditions according to [Sod,1978]
; 5.)shear_layer
; 	 set initial conditions (rho_0,u_0,p_0) and the shear layer width from inifile;
; 6.)simple-shock
;    produces standing shock (1D) in x direction, specify inicond_(pressure,velocity,density);
inicond=mask;zeros;pressure_blob;sod_shock_tube
inicond_width=0.01;
initial_pressure=101330.0;
initial_velocity=50.0 0.0 0;
initial_temperature=200;
initial_density=1.645;

[Discretization]
; order of derivatives [ FD_2nd_central | FD_4th_central_optimized ]
order_discretization=FD_4th_central_optimized;;
; order of refinement predictor [ multiresolution_4th | multiresolution_2nd ]
order_predictor=multiresolution_4th;
; boundary condition [ periodic ]
boundary_cond=periodic;
; filter type [no_filter | explicit_5pt | explicit_7pt | explicit_9pt | explicit_11pt | wavelet | bogey_shock]
filter_type=no_filter;
; filter frequency (note: set to very high value to dissable filtering
filter_freq=10;
; bogey shock detector threshold
r_th= 1e-5;
!if threshold is reached bogey-filter will be switch on [tanh,abs]
switch=tanh;
! bogey-filter detection method
detector_method=divU
! write out sigma for every n filter iterations (if 0 then sigma is not written out)
save_filter_strength=1


[VPM]
; Volume penalization method to take obstacles into account without adapting the
; grid. Penalization is an equation-dependent addon. It can not be used with all
; RHS, if the RHS does not support it.
; flag for penalization (0/1)
penalization=0;
; smooth mask for penalization term [0,1]. If the obstacle moves, this flag should
; be set, and in static cases as well. hard masks with only 0 and 1 are deprecated but
; included for completeness.
smooth_mask=1;
; penalization factor. Can be seen as porosity, so smaller values = harder walls
; Note for explicit time integration, dt < C_eta
C_eta=1e-3;
; geometry
geometry=cylinder;
; center coordinate for cylinder
x_cntr=5 5 0;
; radius of cylinder
R_cyl=0.5;


[MPI]
; method for data exchange [ RMA_lock_unlock_get | RMA_lock_unlock_put | Non_blocking_Isend_Irecv ]
mpi_data_exchange=Non_blocking_Isend_Irecv ;

[BRIDGE]
; type 1 if a bridge shell be created and 0 if not
connect_with_bridge=0;
; The following parameters are only needed if there is a bridge

; Usage of a common MPI_comm_world  (1,yes,true,T=true / 0,no,false,F=false)
bridgeCommonMPI=0;
; If bridgeFluidMaster is true WABBIT is seen as the master and will
; spawn (split off) the processes of the other MPI_WORLD
;  (1,yes,true,T=true / 0,no,false,F=false)
bridgeFluidMaster=1;
; Command to use to launch the particle program (name of the executable)
particleCommand=./pig;

[Timing]
; If set to 1, the code will issue a single XXXXXtimes.dat file per proc, where one
; can examine individual mpiranks manually. this file is written in every iteration.
; the IO cost on some machines can be substantial if many cores are used: better disable
; this functionality then. default is 0.
write_individual_timings=0;

[Debug]
; check if the ghost node synchronization gives the right order, on a random
; grid. this test costs some CPU time but no memory. It is done only once at startup.
test_ghost_nodes_synch=1;
test_treecode=0;
; internal testing routine for the ghost nodes: allocates HUGE amounts of memory
check_redundant_nodes=0;
